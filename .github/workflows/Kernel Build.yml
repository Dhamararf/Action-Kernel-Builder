name: Kernel Build

on:
  workflow_dispatch:
    inputs:
      BUILD_TITLE:
        description: 'Custom Build Title'
        default: Fulmen Kernel Build
        required: false
      KERNEL_SOURCE:
        description: 'Kernel Source'
        default: https://github.com/Dhamararf/android_kernel_mediatek_mt6765g.git
        required: true
      KERNEL_SOURCE_BRANCH:
        description: 'Kernel Source Branch'
        required: true
      DEFCONFIG:
        description: 'Kernel Defconfig'
        required: true
      ANYKERNEL_URL:
        description: 'AnyKernel Url'
        default: https://github.com/Dhamararf/AnyKernel3.git
        required: false
      ANYKERNEL_BRANCH:
        description: 'AnyKernel Branch (defaults to codename)'
        default: master
        required: true
      SEND_NOTIFICATION:
        description: 'Send Notification'
        type: boolean
        default: true
      ENABLE_KERNELSU:
        description: 'KernelSU'
        type: boolean
        default: false
      UPLOAD_TO_RELEASE:
        description: 'Upload to release'
        type: boolean
        default: false

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
    
    - name: Display User Inputs
      run: |
        echo "::group::User Environment Variables"
        echo "Custom Build Title: ${{ github.event.inputs.BUILD_TITLE }}"
        echo "Kernel Source: ${{ github.event.inputs.KERNEL_SOURCE }}/tree/${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}"
        echo "Kernel Defconfig: ${{ github.event.inputs.DEFCONFIG }}"
        echo "AnyKernel Url: ${{ github.event.inputs.ANYKERNEL_URL }}/tree/${{ github.event.inputs.ANYKERNEL_BRANCH }}"
        echo "Send Notification: ${{ fromJSON('["No", "Yes"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}
        echo "KernelSU: ${{ fromJSON('["No", "Yes"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}
        echo "::endgroup::"

    - name: Initialize workspace
      run: |
        mkdir workspace
        cd workspace

        echo "current_date=$(date +'%d %B %Y')" >> $GITHUB_OUTPUT
        echo "current_time=$(TZ=Asia/Jakarta date +'%H:%M:%S %Z')" >> $GITHUB_OUTPUT
        echo "workspace-folder=$(pwd)" >> $GITHUB_OUTPUT
        echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
        echo "kernelsu=${{ fromJSON('["No", "Yes"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}" >> $GITHUB_OUTPUT
        echo "build_title=${{ github.event.inputs.BUILD_TITLE || github.event.inputs.CODENAME }}" >> $GITHUB_OUTPUT
      id: workspace
      
    - name: Send Telegram notification for start build
      uses: appleboy/telegram-action@master
      env: 
        TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        disable_web_page_preview: true
        message: |
          <b>${{ github.event.inputs.BUILD_TITLE }}</b>
          <b>===Kernel Build Start===</b>
          
          <b>üì± Device</b>: Xiaomi Redmi 9C
          <b>üíæ Codename</b>: Blossom
          <b>üè∑Ô∏è Branch</b>: ${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}
          <b>üóìÔ∏è Date</b>: ${{ steps.workspace.outputs.current_date }}
          <b>‚è≤Ô∏è Local Time</b>: ${{ steps.workspace.outputs.current_time }}
          
          Build by @dhamarar
          
          <b>Kernel Source</b>: ${{ github.event.inputs.KERNEL_SOURCE }}
          <b>Action</b>: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        format: html
        
    - name: Prepare the build environment
      run: |
        sudo apt-get install -y bc flex curl git zip ftp libncurses5 libssl-dev lftp zstd wget libfl-dev python2 python3 libarchive-tools
        git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android11-release --depth=1
        git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9 -b android11-release --depth=1
        wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/android11-release/clang-r383902.tar.gz -O clang.tar.gz
        mkdir clang
        tar -xf clang.tar.gz -C clang
        echo "tools-folder=$(pwd)" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.workspace.outputs.workspace-folder }}
      id: tools

    - name: Clone kernel source
      run: |
        git clone --depth=1 ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_SOURCE_BRANCH }} kernel_tree
        echo "kernel-folder=$(pwd)/kernel_tree" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.workspace.outputs.workspace-folder }}
      id: kernel

    - name: Adding KernelSU
      if: ${{ steps.workspace.outputs.kernelsu == 'Yes' }}
      run: |
        if [ -d "KernelSU" ]; then
          rm -rf "KernelSU"
        fi
        if [ -d "drivers/kernelsu" ]; then
          rm -rf "drivers/kernelsu"
        fi
        curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/main/kernel/setup.sh" | bash -s main
        git checkout susfs-v1.5.5
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}

    - name: Building kernel
      run: |
        export PATH="${{ steps.tools.outputs.tools-folder }}/aarch64-linux-android-4.9/bin:$PATH"
        export PATH="${{ steps.tools.outputs.tools-folder }}/arm-linux-androideabi-4.9/bin:$PATH"
        export PATH="${{ steps.tools.outputs.tools-folder }}/clang/bin:$PATH"
        export LD_LIBRARY_PATH="${{ steps.tools.outputs.tools-folder }}/clang/lib64:$LD_LIBRARY_PATH}"
        export LD_LIBRARY_PATH="${{ steps.tools.outputs.tools-folder }}/clang/lib:$LD_LIBRARY_PATH}"
        export ARCH=arm64
        export SUBARCH=ARM64
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_ARM32=arm-linux-androideabi-
        export KBUILD_BUILD_USER="DhamarAr"
        export KBUILD_BUILD_HOST="Ordinary-Being"
        make O=out clean mrproper CC=clang ${{ github.event.inputs.DEFCONFIG }}_defconfig 
        make O=out CC=clang -j$(nproc --all)
        echo "elapsed_time=$(echo "$(date +%s)"-"${{ steps.workspace.outputs.start_time }}" | bc)" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}
      id: build

    - name: AnyKernel3
      if: ${{ success() && github.event.inputs.ANYKERNEL_URL != '' }}
      continue-on-error: true
      run: |
        if [[ -z "${{ github.event.inputs.ANYKERNEL_BRANCH }}" ]]; then
          anykernel_branch=${{ github.event.inputs.DEFCONFIG }}
        else
          anykernel_branch=${{ github.event.inputs.ANYKERNEL_BRANCH }}
        fi
        git clone --recursive --depth=1 ${{ github.event.inputs.ANYKERNEL_URL }} -b $anykernel_branch AnyKernel3
        if [ -e "Image.gz" ]; then
          cp -f Image.gz AnyKernel3
          echo "Warning: Don't forget about dtb."
        elif [ -e "Image" ]; then
          cp -f Image AnyKernel3
          echo "Warning: Don't forget about dtb."
        fi
        name=AnyKernel3-FulmenKernel-Blossom${{ fromJSON('["", "-KSU"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}-$(date +%Y%m%d).zip
        cd AnyKernel3
        zip -q -r $name *
        mv $name ../
        echo "zipname=$name" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/
      id: anykernel

    - name: Check the output directory before uploading
      run: |
        ls -al ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/

    - name: Upload to Release
      if: ${{ github.event.inputs.UPLOAD_TO_RELEASE == 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/Image.gz
          ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/Image
          ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/${{ steps.anykernel.outputs.zipname }}
        name: ${{ github.event.inputs.CODENAME }}-${{ github.run_id }}
        tag_name: ${{ github.run_id }}
        body: |
          <b>${{ steps.workspace.outputs.build_title }}</b>
          <b>Kernel successfully built!</b>, took ${{ steps.build.outputs.elapsed_time }} seconds.
          
          <b>Kernel tree</b>: ${{ github.event.inputs.KERNEL_TREE }}/tree/${{ github.event.inputs.KERNEL_TREE_BRANCH }}
          <b>KernelSU</b>: ${{ steps.workspace.outputs.kernelsu }}
          <b>Action</b>: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/upload-artifact@v4
      if: ${{ success() && github.event.inputs.UPLOAD_TO_RELEASE != 'true' }}
      with:
        name: Image.gz
        path: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/Image.gz

    - uses: actions/upload-artifact@v4
      if: ${{ success() && github.event.inputs.UPLOAD_TO_RELEASE != 'true' }}
      with:
        name: Image
        path: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/Image

    - uses: actions/upload-artifact@v4
      if: ${{ success() && github.event.inputs.ANYKERNEL_URL != '' && github.event.inputs.UPLOAD_TO_RELEASE != 'true' }}
      with:
        name: ${{ steps.anykernel.outputs.zipname }}
        path: |
          ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/AnyKernel3/
          !${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/AnyKernel3/.git
          !${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/AnyKernel3/.github

    - name: Send Telegram notification for success
      uses: appleboy/telegram-action@master
      env: 
        TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
      if: ${{ success() && env.TELEGRAM_TO != '' && github.event.inputs.SEND_NOTIFICATION == 'true' }}
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        disable_web_page_preview: true
        document: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/${{ steps.anykernel.outputs.zipname }}
        message: |
          <b>${{ steps.workspace.outputs.build_title }}</b>
          <b>‚úÖ Kernel Successfully Build</b>
          
          <b>üì± Device</b>: Xiaomi Redmi 9C 
          <b>üíæ Codename</b>: Blossom
          <b>üè∑Ô∏è Branch</b>: ${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}
          <b>üì¶ Zip Name</b>: ${{ steps.anykernel.outputs.zipname }}
          <b>‚è≥ Build Time</b>: ${{ steps.build.outputs.elapsed_time }} seconds.
          <b>üóìÔ∏è Date</b>: ${{ steps.workspace.outputs.current_date }}
          <b>‚òØÔ∏è KernelSU</b>: ${{ steps.workspace.outputs.kernelsu }}
          
          Build by @dhamarar
          
          <b>Kernel Source</b>: ${{ github.event.inputs.KERNEL_SOURCE }}
          <b>Action</b>: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        format: html

    - name: Send Telegram notification for failure
      uses: appleboy/telegram-action@master
      env: 
        TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
      if: ${{ failure() && env.TELEGRAM_TO != '' && github.event.inputs.SEND_NOTIFICATION == 'true' }}
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        disable_web_page_preview: true
        message: |
          <b>${{ steps.workspace.outputs.build_title }}</b>
          <b>‚ùåFailed building kernel</b>, check ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} for more info.
          
          <b>Kernel Source</b>: ${{ github.event.inputs.KERNEL_SOURCE }}
          <b>KernelSU</b>: ${{ steps.workspace.outputs.kernelsu }}
        format: html
      continue-on-error: true
